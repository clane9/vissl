# @package _global_
config:
  VERBOSE: False
  LOG_FREQUENCY: 10
  TEST_ONLY: False
  TEST_MODEL: False
  SEED_VALUE: 0
  MULTI_PROCESSING_METHOD: forkserver
  HOOKS:
    PERF_STATS:
      MONITOR_PERF_STATS: True
      ROLLING_BTIME_FREQ: 313
  DATA:
    NUM_DATALOADER_WORKERS: 5
    TRAIN:
      DATA_SOURCES: [disk_folder]
      DATASET_NAMES: [imagenet1k_folder]
      BATCHSIZE_PER_REPLICA: 64
      LABEL_TYPE: sample_index    # just an implementation detail. Label isn't used
      # BYOL Paper - Page 16 - Appendix B
      # Copied from iseessel:byol-v2
      # TODO: Authors say they use the BYOL augmentation scheme, but give no
      # other details. Unclear to me whether they use both augmentation
      # pipelines, or one or the other. Assuming both, which is most literal
      # interpretation.
      TRANSFORMS:
        - name: ImgReplicatePil
          num_times: 2
        - name: RandomResizedCrop
          size: 224
        - name: RandomHorizontalFlip
          p: 0.5
        - name: ImgPilColorDistortion
          # TODO: fix saturation
          strength: 0.5
        - name: ImgPilMultiCropRandomApply
          transforms:
            - name: ImgPilGaussianBlur
              p: 1
              radius_min: 0.1
              radius_max: 2.0
          prob: [1.0, 0.1]
        - name: ImgPilMultiCropRandomApply
          transforms:
            - name: ImgPilRandomSolarize
              p: 1.0
          prob: [0.0, 0.2]
        - name: ToTensor
        - name: Normalize
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
      COLLATE_FUNCTION: simclr_collator
      MMAP_MODE: True
      COPY_TO_LOCAL_DISK: False
      COPY_DESTINATION_DIR: /tmp/imagenet1k/
      DROP_LAST: True
  TRAINER:
    TRAIN_STEP_NAME: standard_train_step
  METERS:
    name: ""
  MODEL:
    TRUNK:
      NAME: resnet
      RESNETS:
        DEPTH: 50
    HEAD:
      PARAMS: [
        # Copied from @OlivierDehaene.
        ["mlp", {"dims": [2048, 2048, 2048], "use_relu": True, "use_bn": True, "use_bias": False, "skip_last_layer_relu_bn": False}],
        ["mlp", {"dims": [2048, 256], "use_relu": False, "use_bn": True, "use_bias": False, "skip_last_layer_relu_bn": False}],
        ["skip_mlp", {"dims": [256, 4096, 256], "use_relu": True, "use_bn": True, "use_bias": True, "skip_last_layer_relu_bn": True}]
      ]
    SYNC_BN_CONFIG:
      CONVERT_BN_TO_SYNC_BN: True
      SYNC_BN_TYPE: apex
      GROUP_SIZE: 8
    AMP_PARAMS:
      USE_AMP: False
  LOSS:
    name: nnclr_loss
    nnclr_loss:
      embedding_dim: 256
      queue_size: 98304
      temperature: 0.1
  OPTIMIZER:
      name: lars
      eta: 0.001
      weight_decay: 1.0e-6
      momentum: 0.9
      nesterov: False
      num_epochs: 1000
      regularize_bn: False
      regularize_bias: False
      exclude_bias_and_norm: True
      param_schedulers:
        lr:
          auto_lr_scaling:
            auto_scale: true
            base_value: 0.3
            base_lr_batch_size: 256
          name: composite
          schedulers:
            - name: linear
              start_value: 0.6
              end_value: 4.8
            - name: cosine
              start_value: 4.8
              end_value: 0.0000
          update_interval: step
          interval_scaling: [rescaled, fixed]
          lengths: [0.01, 0.99] # 10ep
  DISTRIBUTED:
    BACKEND: nccl
    NUM_NODES: 8
    NUM_PROC_PER_NODE: 8
    RUN_ID: xxxxxxxxxxxxxxxxxxxxxxxxxxxx
    INIT_METHOD: tcp
    NCCL_DEBUG: True
  MACHINE:
    DEVICE: gpu
  CHECKPOINT:
    AUTO_RESUME: True
    CHECKPOINT_FREQUENCY: 5
    CHECKPOINT_ITER_FREQUENCY: -1  # set this variable to checkpoint every few iterations
